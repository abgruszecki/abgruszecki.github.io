[{"authors":null,"categories":null,"content":" I‚Äôm interested in building strong theoretical foundations for pragmatic PL features. During my PhD in Martin Odersky‚Äôs lab I focused on the theory of Capture Tracking for Scala. Also, I added a novel take on GADTs to the Scala compiler, and worked on type inference for System F (coming soon, hopefully!).\nDeveloping some very desireable PL features, like type inference, requires taking on additional complexity to improve the life of the language‚Äôs users. After a certain point, the only way to implement such features without completely losing track of what‚Äôs going on involves developing and studying appropriate formal foundations.\nI‚Äôm also interested in:\npersonal knowledge management interactive programming environments education If you see how all three are connected, let‚Äôs chat :)\n","date":1694563200,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1694563200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"I‚Äôm interested in building strong theoretical foundations for pragmatic PL features. During my PhD in Martin Odersky‚Äôs lab I focused on the theory of Capture Tracking for Scala. Also, I added a novel take on GADTs to the Scala compiler, and worked on type inference for System F (coming soon, hopefully!","tags":null,"title":"Aleks Boruch‚Å†-‚Å†Gruszecki","type":"authors"},{"authors":["Aleks Boruch‚Å†-‚Å†Gruszecki","Martin Odersky","Edward Lee","Ond≈ôej Lhot√°k","Jonathan Brachth√§user"],"categories":null,"content":"","date":1694563200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1694563200,"objectID":"e58aca81384fbca53b36ec23a8242eab","permalink":"https://abgruszecki.ghpages.io/publication/capturing-types/","publishdate":"2000-01-01T00:00:00Z","relpermalink":"/publication/capturing-types/","section":"publication","summary":"Type systems usually characterize the shape of values but not their free variables. However, many desirable safety properties could be guaranteed if one knew the free variables captured by values. We describe ùñ¢ùñ¢\u003c:‚óª, a calculus where such captured variables are succinctly represented in types, and show it can be used to safely implement effects and effect polymorphism via scoped capabilities. We discuss how the decision to track captured variables guides key aspects of the calculus, and show that ùñ¢ùñ¢\u003c:‚óª admits simple and intuitive types for common data structures and their typical usage patterns. We demonstrate how these ideas can be used to guide the implementation of capture checking in a practical programming language.","tags":[],"title":"Capturing Types","type":"publication"},{"authors":["Aleks Boruch‚Å†-‚Å†Gruszecki","Rados≈Çaw Wa≈õko","Yichen Xu","Lionel Parreaux"],"categories":null,"content":"","date":1657411200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1657411200,"objectID":"8293f736918a459791143eb9cc6b5412","permalink":"https://abgruszecki.ghpages.io/publication/case-for-dot/","publishdate":"2000-01-01T00:00:00Z","relpermalink":"/publication/case-for-dot/","section":"publication","summary":"Many programming languages in the OO tradition now support pattern matching in some form. Historical examples include Scala and Ceylon, with the more recent additions of Java, Kotlin, TypeScript, and Flow. But pattern matching on generic class hierarchies currently results in puzzling type errors in most of these languages. Yet this combination of features occurs naturally in many scenarios, such as when manipulating typed ASTs. To support it properly, compilers needs to implement a form of subtyping reconstruction: the ability to reconstruct subtyping information uncovered at runtime during pattern matching. We introduce cDOT, a new calculus in the family of Dependent Object Types (DOT) intended to serve as a formal foundation for subtyping reconstruction. Being descended from pDOT, itself a formal foundation for Scala, cDOT can be used to encode advanced object-oriented features such as generic inheritance, type constructor variance, F-bounded polymorphism, and first-class recursive modules. We demonstrate that subtyping reconstruction subsumes GADTs by encoding $\\lambda_{2,G\\mu}$, a classical constraint-based GADT calculus, into cDOT.","tags":[],"title":"A case for DOT: Theoretical Foundations for Objects with Pattern Matching and GADT-style Reasoning","type":"publication"},{"authors":["Jonathan Brachth√§user","Philipp Schuster","Edward Lee","Aleks Boruch‚Å†-‚Å†Gruszecki"],"categories":null,"content":"","date":1651190400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651190400,"objectID":"f9856b53e48d9f6e76efcc0636fce993","permalink":"https://abgruszecki.ghpages.io/publication/eff-cap-box/","publishdate":"2000-01-01T00:00:00Z","relpermalink":"/publication/eff-cap-box/","section":"publication","summary":"Reasoning about the use of external resources is an important aspect of many practical applications. Effect systems enable tracking such information in types, but at the cost of complicating signatures of common functions. Capabilities coupled with escape analysis offer safety and natural signatures, but are often overly coarse grained and restrictive. We present System C, which builds on and generalizes ideas from type-based escape analysis  and demonstrates that capabilities and effects can be reconciled harmoniously. By assuming that all functions are second class, we can admit natural signatures for many common programs. By introducing a notion of boxed values, we can lift the restrictions of second-class values at the cost of needing to track degree-of-impurity information in types. The system we present is expressive enough to support effect handlers in full capacity. We practically evaluate System C in an implementation and prove its soundness.","tags":[],"title":"Effects, capabilities, and boxes: from scope-based reasoning to type-based reasoning and back","type":"publication"}]