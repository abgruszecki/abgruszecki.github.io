<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects | ABG</title><link>https://abgru.me/project/</link><atom:link href="https://abgru.me/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 15 Jan 2024 17:40:17 +0000</lastBuildDate><image><url>https://abgru.me/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url><title>Projects</title><link>https://abgru.me/project/</link></image><item><title>Capture Tracking</title><link>https://abgru.me/project/capture-tracking/</link><pubDate>Mon, 15 Jan 2024 17:40:17 +0000</pubDate><guid>https://abgru.me/project/capture-tracking/</guid><description>&lt;p>Capture Tracking is an approach to tracking the capture of capabilities in types,
which has been the subject of a long collaboration with
Martin Odersky,
Jonathan Brachthäuser,
Ondřej Lhoták,
and Edward Lee,
and to which a number of other people have contributed.&lt;/p>
&lt;p>The foundational formal system for the approach is CC&amp;lt;:◻,
published in &lt;a href="https://dl.acm.org/doi/abs/10.1145/3618003" target="_blank" rel="noopener">TOPLAS&lt;/a>.
Its algorithmic aspects are discussed in a
&lt;a href="https://arxiv.org/abs/2306.06496" target="_blank" rel="noopener">technical report&lt;/a>.&lt;/p>
&lt;p>Martin Odersky&amp;rsquo;s Caprese project
is focused on investigating these formal foundations further
and developing their applications.
The particular questions include
(1) How to solve the &amp;ldquo;what color is your function&amp;rdquo; problem when mixing synchronous and asynchronous programming?
(2) How to express effect polymorphism without creating boilerplate?
(3) How to combine manual and automatic memory management?
(4) How to express high-level concurrency and parallelism, safely?
(5) How to migrate large existing code bases to the new system?
Find out in the slide deck &lt;a href="https://www.slideshare.net/Odersky/capabilities-for-resources-and-effects-252161040" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>CC&amp;lt;:◻ is neither the first nor the last formalism for Capture Tracking.
I discuss the developments that led to CC&amp;lt;:◻ in my dissertation on
the &amp;ldquo;Formal Foundations of Capture Tracking&amp;rdquo;,
which I&amp;rsquo;ll be defending privately on 25th of January, 2024.
I&amp;rsquo;ll be happy to send you a preprint via email,
otherwise I&amp;rsquo;ll publish the final version and link it here not too long after the defense.
(Fingers crossed!)&lt;/p>
&lt;p>Capture Tracking is particularly focused on usability and ergonomics,
so naturally there is an implementation,
developed to a &lt;em>significant&lt;/em> extent by Martin Odersky.
You can find out more on &lt;a href="https://docs.scala-lang.org/scala3/reference/experimental/cc.html" target="_blank" rel="noopener">this&lt;/a> page.&lt;/p>
&lt;p>Work progresses on developing CC&amp;lt;:◻ further.
A formal system which enriches it with safe concurrency
(by tracking separation of capabilities)
was conditionally accepted for OOPSLA 2024.
Find the preprint &lt;a href="https://arxiv.org/abs/2308.07474" target="_blank" rel="noopener">here&lt;/a>.&lt;/p>
&lt;p>There is also ongoing work on using the Capture Tracking implementation
to develop a base library for async computation in direct style.
A &amp;ldquo;strawman&amp;rdquo; version of this library is available in a Github repository
&lt;a href="https://github.com/lampepfl/gears" target="_blank" rel="noopener">here&lt;/a>.&lt;/p></description></item></channel></rss>